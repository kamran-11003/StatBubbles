const mongoose = require('mongoose');

const playerSchema = new mongoose.Schema({
  playerId: { type: String, required: true, unique: true },
  uid: { type: String, required: true },
  guid: { type: String },
  type: { type: String },
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  displayName: { type: String, required: true },
  shortName: { type: String },
  weight: { type: Number },
  height: { type: Number },
  age: { type: Number },
  jersey: { type: String },
  position: { type: String },
  college: { type: String },
  teamId: { type: String },
  teamName: { type: String },
  teamAbbreviation: { type: String },
  teamDisplayName: { type: String },
  teamColor: { type: String },
  teamAlternateColor: { type: String },
  headshot: { type: String },
  // Passing Stats
  gamesPlayed: { type: Number, default: 0 },
  passCompletions: { type: Number, default: 0 },
  passAttempts: { type: Number, default: 0 },
  completionPercentage: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  passYards: { type: Number, default: 0 },
  yardsPerPassAttempt: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  passTouchdowns: { type: Number, default: 0 },
  interceptions: { type: Number, default: 0 },
  longestPass: { type: Number, default: 0 },
  sacksTaken: { type: Number, default: 0 },
  sackYards: { type: Number, default: 0 },
  passerRating: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  qbr: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  // Rushing Stats
  rushingAttempts: { type: Number, default: 0 },
  rushingYards: { type: Number, default: 0 },
  yardsPerRushAttempt: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  rushTouchdowns: { type: Number, default: 0 },
  longestRush: { type: Number, default: 0 },
  rushingFirstDowns: { type: Number, default: 0 },
  rushingFumbles: { type: Number, default: 0 },
  rushingFumblesLost: { type: Number, default: 0 },
  // Receiving Stats
  receptions: { type: Number, default: 0 },
  receivingTargets: { type: Number, default: 0 },
  receivingYards: { type: Number, default: 0 },
  yardsPerReception: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  receivingYardsPerGame: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  receivingTouchdowns: { type: Number, default: 0 },
  longestReception: { type: Number, default: 0 },
  receivingFirstDowns: { type: Number, default: 0 },
  receivingFumbles: { type: Number, default: 0 },
  receivingFumblesLost: { type: Number, default: 0 },
  catchPercentage: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  // Defense Stats
  totalTackles: { type: Number, default: 0 },
  soloTackles: { type: Number, default: 0 },
  assistedTackles: { type: Number, default: 0 },
  sacks: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  forcedFumbles: { type: Number, default: 0 },
  fumbleRecoveries: { type: Number, default: 0 },
  fumbleRecoveryYards: { type: Number, default: 0 },
  defensiveInterceptions: { type: Number, default: 0 },
  interceptionYards: { type: Number, default: 0 },
  avgInterceptionYards: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  interceptionTouchdowns: { type: Number, default: 0 },
  longestInterception: { type: Number, default: 0 },
  passesDefended: { type: Number, default: 0 },
  stuffs: { type: Number, default: 0 },
  stuffYards: { type: Number, default: 0 },
  kicksBlocked: { type: Number, default: 0 },
  safeties: { type: Number, default: 0 },
  // Scoring Stats
  passingTouchdowns: { type: Number, default: 0 },
  rushingTouchdowns: { type: Number, default: 0 },
  receivingTouchdowns: { type: Number, default: 0 },
  returnTouchdowns: { type: Number, default: 0 },
  totalTouchdowns: { type: Number, default: 0 },
  totalTwoPointConvs: { type: Number, default: 0 },
  kickExtraPoints: { type: Number, default: 0 },
  fieldGoals: { type: Number, default: 0 },
  totalPoints: { type: Number, default: 0 },
  // Kicking Stats
  fieldGoalsMade: { type: Number, default: 0 },
  fieldGoalAttempts: { type: Number, default: 0 },
  fieldGoalPercentage: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  fieldGoalsMade1_19: { type: Number, default: 0 },
  fieldGoalsMade20_29: { type: Number, default: 0 },
  fieldGoalsMade30_39: { type: Number, default: 0 },
  fieldGoalsMade40_49: { type: Number, default: 0 },
  fieldGoalsMade50: { type: Number, default: 0 },
  longFieldGoalMade: { type: Number, default: 0 },
  extraPointsMade: { type: Number, default: 0 },
  extraPointAttempts: { type: Number, default: 0 },
  extraPointPercentage: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  totalKickingPoints: { type: Number, default: 0 },
  // Punting Stats
  punts: { type: Number, default: 0 },
  puntYards: { type: Number, default: 0 },
  grossAvgPuntYards: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  netAvgPuntYards: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  puntsInside20: { type: Number, default: 0 },
  puntTouchbacks: { type: Number, default: 0 },
  longestPunt: { type: Number, default: 0 },
  blockedPunts: { type: Number, default: 0 },
  // Kick Returns
  kickReturnAttempts: { type: Number, default: 0 },
  kickReturnYards: { type: Number, default: 0 },
  kickReturnAverage: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  kickReturnTouchdowns: { type: Number, default: 0 },
  longestKickReturn: { type: Number, default: 0 },
  kickReturnFairCatches: { type: Number, default: 0 },
  // Punt Returns
  puntReturnAttempts: { type: Number, default: 0 },
  puntReturnYards: { type: Number, default: 0 },
  puntReturnAverage: { type: Number, default: 0, set: v => v ? parseFloat(v.toFixed(2)) : 0 },
  puntReturnTouchdowns: { type: Number, default: 0 },
  longestPuntReturn: { type: Number, default: 0 },
  puntReturnFairCatches: { type: Number, default: 0 },
  // Timestamps
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

// Indexes for performance
playerSchema.index({ displayName: 1 });
playerSchema.index({ teamId: 1 });
playerSchema.index({ position: 1 });
playerSchema.index({ gamesPlayed: 1 });
playerSchema.index({ passYards: -1, rushingYards: -1, receivingYards: -1, totalTackles: -1, fieldGoalsMade: -1, punts: -1 });

module.exports = mongoose.model('NFLPlayer', playerSchema);